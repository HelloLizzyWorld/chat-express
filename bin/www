#!/usr/bin/env node
// www 파일을 콘솔 명령어로 만들 때, 이 주석이 사용된다.

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("chat-express:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000"); //process.env.PORT 객체에 값이 있다면 그 값을 사용하고, 없다면 3000번 포트를 이용하도록 한다.
app.set("port", port); // (키, 값)으로 데이터를 저장

/**
 * Create HTTP server.
 */

var server = http.createServer(app); // http.createServer에 app 모듈을 넣어주면, app 모듈은 createServer메서드의 콜백 함수
app.io.attach(server); // 소켓과 서버 연결

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port); // http 웹 서버와 동일하게 listen한다.
server.on("error", onError); // 즉, 기존 서버를 구동하는 것과 동일하게 포트를 연결하고 서버를 실행한다고 할 수 있다.
server.on("listening", onListening); // 다만, express는 콜백 함수 부분을 기존과 다르게 핸들링 하는 것이다.

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
